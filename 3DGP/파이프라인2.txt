입력 레이아웃

포지션 -> 모델에 포지션 데이터 씀 -> 0번 슬롯
노멀 -> 모델이 노멀 데이터 씀 -> 1반 슬롯
...

아래처럼 배열에 저정하여 한꺼번에 파이프라인으로 보냄

|
V
ㅁㅁㅁㅁㅁㅁㅁ
ㅁㅁㅁㅁㅁㅁㅁ
ㅁㅁㅁㅁㅁㅁㅁ



프리미티브 토폴로지

IA           -> VS   -> RS
입력 조립기       정점      레스터라이저

그림을 그리기 위한 방법을 알아야 함 -> 설정 필요

포인트 리스트: 정점 버퍼 데이터들은 점들의 배열 -> 점 2개를 레스터 라이저로 보냄
-> 선분 3개 그려짐

라인 스트립: 라인들이 전부 연결되어야 함

삼각형 리스트: 점 3개 필요, 삼각형 2개 그리겠다는 의미

삼각형 사이는 정점 순서가 달라 레스터라이저는 은면으로 판단하여 삼각형을 그리지 않음

삼각형 스트립: 양 쪽 삼각형 연결되야 함 -> 삼각형 이어 그림

정점들의 나열 순서가 시계 -> 반시계 -> 시계 -> 반시계
와인딩 오더를 바꾸어도 모두 그려짐 -> 모든 삼각형이 그려짐

각각의 리스트는 ADJ라는 정보가 있는 삼각형들을 프리미티브로 표현 가능

삼각형들이 연결 -> 모델 표현 -> 삼각형 하나 그릴 때 인접 삼각형 3개 있음 -> 인접 삼각형 정보 사용하여 그리고 싶을 때 -> 모델에 ADJ 정보를 만들어 주면 -> 추가적인 처리 가능

삼각형 하나 -> 어떤 면인지 알기 어려움
인접 삼각형이 있을 때 -> 인접 삼각형으로 어떤 면인지 알기 쉬움

기하 쉐이더에서 ADJ 정보를 주로 사용

컨트롤 포인트 상수 32개 정의되어있음
뒤에서 테셀레이션 다룰 때 사용

포인트 리스트: n개의 정점 필요
라인 리스트: 2*n개의 정점 필요
라인 스트립: n + 1개의 정점 필요
삼각형 리스트: 3*n개의 정점 필요
삼각형 스트립: n + 2개의 정점 필요


드로우 호출-> 삼각형을 10개를 그리고 싶다.. -> 프리미티브 토폴로지가 삼각형 리스트 -> 정점 30개 넣어야 함


정점 버퍼
30개의 정점을 넣었다... -> 삼각형 리스트 -> 드로우 호출 -> 정점 3개 -> 삼각형 조립 -> 파이프 라인 보내기 -> 아무 문제 x

29개의 정점 -> 꼭짓점 하나 부족 -> 꼭짓점 2개로 삼각형 그리기 불가능 -> 출력 안 되거나 이상한 부분 발생

정점 15개 버퍼에 넣음 -> 삼각형 5개를 연결하고자 함 -> 삼각형 리스트 / 삼각형 스트립 -> 정점 버퍼에 첫 번째 P1, P2, P3 -> 첫 번째 삼각형 -> ...
문제가 있음: 
1. 정점 하나는 여러 정보를 가질 수 있음 -> 실수 10개 이상 -> 약 40바이트 가짐
2. 정점 중복 ->정점을 저장하기 위한 버퍼가 많아짐 -> 모델 사이즈 커짐 -> 메모리 사용 많아짐
3. 입력 조립 -> 버텍스 쉐이더로 이미 보냈던 정점 정보 보내는 과정을 중복해서 함 -> 호출 결과 같은데도 반복함 -> 낭비

버퍼에는 딱 필요한 정점만 저장을 하자. -> 중복 피하기 위함
인덱스를 사용하여 정점 버퍼에 있는 정보로 삼각형 조립
012 -> 삼각형 -> 132 -> 삼각형 -> ...

중복 되어도 바이트 수가 작음

인덱스 버퍼는 파이프라인에 하나만 연결 가능

버텍스 버퍼는 최대 16개까지 파이프라인에 연결 가능


파이프라인

루트 시그니처
가장 중요함

시그너처란?
	함수의 이름이 있음, 파라매터가 있음, 리턴 타입이 있음->함수 프로토타입
	파라매터들이 어떤 데이터 타입이고 몇 개인가? <- 시그너처
	오버로딩->파라매터의 개수, 타입이 달라짐

	글로벌 변수가 다르면 시그너처가 다른것임


	시리얼라이즈: 데이터들을 일렬로 나열함(직렬화) -> 루트 시그너처 오브젝트 생성 -> 그래픽스 파이프라인 상태 만듬


루트 시그너처는 크게 두 가지
루트 파라매터, 루트 아규먼트
둘이 무슨 차이? -> 아규먼트: 함수에 전달하는 값, 파라미터: 받는 함수의 인자

어떤 리소스들이 어떤 글로벌 변수들과 연결되는가? = 루트 시그니처
테이블에 루트 파라매터 3가지


상수 버퍼
	
버퍼중에 특별한 취급을 받는 버퍼

생성하기 위해 크레이트 커밋티드 리소스 함수로 생성

디스크립터 3개 = 리소스 3개


HLSL
High Level Shader Language
	